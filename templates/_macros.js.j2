{% macro function_header(bv, func) %}
// {{ "%#x" % func.start }}: {{ func.type.return_value.__str__() }} {{ func.name }}({{ func.type.parameters | join(", ") }})
const func_{{ func.start }}_module = Process.getModuleByName("{{ bv.file.original_filename.split("/") | last }}").base;
const func_{{ func.start }}_ptr = ptr(func_{{ func.start }}_module.add({{ "%#x" % (func.start - bv.start) }}));
{% endmacro %}

{% macro argparse(param, var) -%}
	{%- set type = param.type | string -%}

	{%- for _ in range(1, type.count("**")) if "**" in type -%}
		{%- set var = var + ".readPointer()" -%}
		{%- set type = type[:-1] -%}
	{%- endfor -%}
	
	{%- if type == "char*" -%}
		{{ var }}.readCString()
	{%- elif type == "wchar_t*" -%}
		{{ var }}.readUtf16String()
	{%- elif type == "int" -%}
		{{ var }}.readInt()
	{%- elif type == "uint" -%}
		{{ var }}.readUInt()
	{%- elif type == "float" -%}
		{{ var }}.readFloat()
	{%- elif type == "double" -%}
		{{ var }}.readDouble()
	{%- elif type == "bool" -%}
		{{ var }}.readU8()
	{%- elif type == "char" -%}
		{{ var }}.readU8()
	{%- elif type == "wchar_t" -%}
		{{ var }}.readU16()
	{%- elif type == "int8_t" -%}
		{{ var }}.toInt32()
	{%- elif type == "uint8_t" -%}
		{{ var }}.toInt32()
	{%- elif type == "int16_t" -%}
		{{ var }}.toInt32()
	{%- elif type == "uint16_t" -%}
		{{ var }}.toInt32()
	{%- elif type == "int32_t" -%}
		{{ var }}.toInt32()
	{%- elif type == "uint32_t" -%}
		{{ var }}.toInt32()
	{%- elif type == "int64_t" -%}
		{{ var }}.toInt32()
	{%- elif type == "uint64_t" -%}
		{{ var }}.toInt32()
	{%- elif type == "size_t" -%}
		{{ var }}.toInt32()
	{%- elif type.endswith("*") -%}
		{{ var }}.readPointer()
	{%- else -%}
		{{ var }}
	{%- endif -%}
{%- endmacro %}

{% macro type_translate(bn_type) -%}
	{%- set bn_type = bn_type | string %}
	{%- set type_mapping = {
		"int8_t": "int8",
		"uint8_t": "uint8",
		"int16_t": "int16",
		"uint16_t": "uint16",
		"int32_t": "int32",
		"uint32_t": "uint32",
		"int64_t": "int64",
		"uint64_t": "uint64",
		"char": "char",
		"wchar_t": "uint16",
		"void": "void",
		"float": "float",
		"double": "double",
		"size_t": "size_t"
	} -%}

	{%- set frida_type = type_mapping[bn_type] if bn_type in type_mapping else "pointer" -%}

	{%- if bn_type.endswith('*') -%}
		"pointer"
	{%- else -%}
		"{{ frida_type }}"
	{%- endif -%}
{%- endmacro %}
