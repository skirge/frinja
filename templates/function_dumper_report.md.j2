{%- macro backtrace(bt, indent) -%}
{% set indent = indent|default('') %}
{%- for entry in bt %}
{%- set addr = entry | int %}
{%- set sym = bv.get_functions_containing(bv.start + addr) %}
{%- for func in sym %}
{{indent}}- {{ "%#x" % (bv.start + addr) }} : {{ func.name }}+{{ (bv.start + addr) - func.start }}
{%- endfor %}
{%- endfor -%}
{%- endmacro %}

{% macro bt1(entry, indent) -%}
{% set indent = indent|default('') -%}
{% set addr = entry[0] | int -%}
{% set sym = bv.get_functions_containing(bv.start + addr) -%}
{% for func in sym -%}
{{indent}}{{ "%#x" % (bv.start + addr) }} : {{ func.name }}+{{ (bv.start + addr) - func.start }}
{%- endfor %}
{%- endmacro %}

{% macro telescope(frame, value, key, level) -%}
{%- if value in frame["pointers"].keys() -%}
{%- if key %}
### {{ key }}
{% endif %}
{%- set pv = frame["pointers"][value] %}
{%- set indent = level*"    " %}
{%- if 'symbol' in pv -%}
{{indent}}* `{{value }}` ({{ pv['symbol'] }})
{%- else -%}
{{indent}}* `{{ value }}`
{%- endif -%}
: `{{ pv["hexdump"] }}`
{%- if value in frame["heap"].keys() %}
{{indent}}    * Heap: {{ heap(frame, value) }} {{bt1(frame["heap"][value].backtrace)}}
{%- endif %}
{%- if value in frame["fileReads"].keys() %}
{{indent}}    * File: {{ fileread(frame, value) }} {{bt1(frame["fileReads"][value].backtrace)}}
{%- endif %}
{%- if level < 5 %}
{%- for f in pv.fields %}
{{indent}}* {{"%#x" % (loop.index0*8)}}: {{f}}
{{ telescope(frame, f, none, level+1) }}
{% endfor %}
{%- endif %}
{%- endif -%}
{%- endmacro %}

{% macro ispointer(frame, value) -%}
{% if value in frame["pointers"].keys() -%}
**POINTER**
{%- endif %}
{%- endmacro %}

{% macro isheap(frame, value) -%}
{% if value in frame["heap"].keys() -%}
**HEAP**
{%- endif %}
{%- endmacro %}

{% macro isfile(frame, value) -%}
{% if value in frame["fileReads"].keys() -%}
**FILE**
{%- endif %}
{%- endmacro %}

{%- macro heap(frame, value) -%}
{%- if value in frame["heap"].keys() -%}
{{ frame["heap"][value].size }}
{%- endif -%}
{%- endmacro -%}

{%- macro fileread(frame, value) -%}
{%- if value in frame["fileReads"].keys() -%}
{{- frame["fileReads"][value].size }} bytes from {{ frame["fileReads"][value].path }}
{%- endif -%}
{%- endmacro -%}

{%- macro heapbt(frame, value,indent) -%}
{% set indent = indent|default('') %}
{%- if value in frame["heap"].keys() %}
```
{{ backtrace(frame["heap"][value].backtrace, indent) }}
```
{%- endif %}
{%- endmacro %}

{%- macro filereadbt(frame, value, indent) -%}
{% set indent = indent|default('') %}
{%- if value in frame["fileReads"].keys() -%}
```
{{ backtrace(frame["fileReads"][value].backtrace, indent) }}
```
{%- endif -%}
{%- endmacro -%}

# Function Dump report for {{ func.name }}

{% for frame in data -%}
{%- if "args" in frame.keys() -%}
## Function Call {{ frame["index"] }}

- Depth: {{ data.depth }}
- Callee: {{ "%#x" % (bv.start + frame["return"]) }}
- Thread ID: {{ frame["thread_id"] }}

### Backtrace

{{ backtrace(frame["backtrace"]) }}

### Arguments:
Arguments passed in : {{ bv.arch.standalone_platform.default_calling_convention.int_arg_regs }}

| Argument | Value | Pointer     |Heap buffer | File buffer |
|----------|-------|-------------|------------|-------------|
{% for key, value in frame["args"].items() -%}
| `{{ key }}` | **{{ value }}** | {{ ispointer(frame, value ) }} | {{ isheap(frame, value) }}  | {{ isfile(frame, value) }}  |
{% endfor %}

{%- for key, value in frame["args"].items() %}
{{ telescope(frame, value, key, 1) }}
{%- endfor %}

{%- else -%}
## Function Return {{ frame["index"] }}

- Return Value: {{ frame["retval"] }}

{%- endif %}


### Context

| Register | Value | Pointer    |Heap buffer | File buffer |
|----------|-------|------------|------------|-------------|
{% for key, value in frame["context"].items() -%}
| `{{ key }}` | **{{ value }}** | {{ ispointer(frame, value) }} | {{ isheap(frame, value) }} | {{ isfile(frame, value) }} |
{% endfor %}

{%- for key, value in frame["context"].items() %}
{{ telescope(frame, value, key, 1) }}
{%- endfor %}

## Heap chunks
{%- for value in frame["heap"].keys() %}
### {{ value }}
{{heapbt(frame, value)}}
{% endfor %}

## Tainted buffers
{%- for value in frame["fileReads"].keys() %}
### {{ value }}
{{filereadbt(frame, value)}}
{% endfor %}

## Open files
| Argument | Value |
|----------|-------|
{%- for key, value in frame["fds"].items() %}
| {{ key }} | {{ value }} |
{% endfor %}

{% endfor %}

---