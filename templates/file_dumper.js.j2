{%- from "_macros.js.j2" import argparse, function_header -%}
{{ function_header(bv, func) }}
const file_path = "{{file_path}}";

console.log(`Module = ${func_{{func.start}}_module}`);

function getBacktrace(context) {
  return Thread.backtrace(context, Backtracer.ACCURATE).map((x) => x.sub(func_{{ func.start }}_module).toString(10))
}

let fileOpens = {};

console.log("[*] hooking input symbol:open");
Interceptor.attach(Module.getExportByName(null, 'open'), {
  onEnter(args) {
        this.path = args[0].readUtf8String(); // pathname
        //console.log("[*] trying to open:[" + this.path + "]");
  },

  onLeave(retval) {
      if(retval.toInt32()<0) {
        //console.log("[!] cannot open:[" + this.path + "]");
        return;
      }
	  fileOpens[retval] = this.path;
  }

})

console.log("[*] hooking input symbol:close");
Interceptor.attach(Module.getExportByName(null, 'close'), {
  onEnter(args) {
      const fd = args[0].toString();
      //console.log("[*] closing:[" + fd + "], path=[" + fileOpens[fd] + "]");
      delete fileOpens[fd];
  },
})

const SEEK_CUR = 1;

const lseek = new NativeFunction(Module.getExportByName(null,'lseek'), 'pointer', ['int', 'pointer', 'int']);

const handleRead = {
  onEnter(args) {

    // Save arguments for processing in onLeave.
	    const readEvent = {};

        const fd = args[0];
        const buf = args[1];
        const size = args[2];
        // off_t lseek(int fd, off_t offset, int whence);
        const pos = lseek(fd.toInt32(), ptr(0), SEEK_CUR);

        if(pos < 0) {
            console.log("[!] Error getting current pos from fd=[" + fd +"]");
        }

        // console.log('[*] trying to read from fd:[' + fd + '], path:[' + fileOpens[fd] + '], buf = [' + buf + '], size=[' + size + '], pos=[' + pos +']');

        if(!fileOpens.hasOwnProperty(fd)) {
            console.log('[!] Unknown fd ' + fd);
        } else {
            if(fileOpens[fd].includes(file_path)) {
                console.log('[*] reading from fd:[' + fd + '], path:[' + fileOpens[fd] + '], buf = [' + buf + '], size=[' + size + '], pos=[' + pos +']');
                readEvent["fd"] = fd;
                readEvent["api"] = "read";
                readEvent["buf"] = buf;
                readEvent["size"] = size;
                readEvent["path"] = fileOpens[fd];
                readEvent["backtrace"] = getBacktrace(this.context);
                readEvent["return"] = this.returnAddress.sub(func_{{func.start}}_module);
                readEvent["pos"] = pos;
                readEvent["context"] = this.context;
                this.readEvent = readEvent;
            }
        }
  },

  onLeave(retval) {
        if(this.readEvent) {
            const readEvent = this.readEvent;
            let hd = hexdump(readEvent['buf'], { length: Math.min(16,readEvent['size']), ansi: false, header:false});
            hd = hd.substring(hd.indexOf(' ')+1);
            readEvent.hexdump = hd;
            readEvent.retval = retval;
            send(readEvent);
        }
  }
}

const inputFunctions = ['read'];

for(const inputf of inputFunctions) {
    if(Module.findExportByName(null,inputf)) {
        console.log("[*] hooking input symbol:" + inputf);
        Interceptor.attach(Module.getExportByName(null, inputf), handleRead);
    }
}

const handleMmap = {
    onEnter(args) {
        this.size = args[1];
        this.fd = args[4];
        this.pos = args[5];
        // console.log('[*] trying to mmap fd:[' + this.fd + '], path:[' + fileOpens[this.fd] + '], size=[' + this.size + ']');
    },

    onLeave(retval) {
        if(!fileOpens.hasOwnProperty(this.fd)) {
            console.log('[!] Unknown fd ' + this.fd);
        } else {
            if(fileOpens[this.fd].includes(file_path)) {
                const readEvent = {};
                const buf = retval;
                console.log('[*] returning from mmap fd:[' + this.fd + '], path:[' + fileOpens[this.fd] + '], buf = [' + buf + '], size=[' + this.size + '], pos=[' + this.pos +']');
                readEvent["fd"] = this.fd;
                readEvent["api"] = "mmap";
                readEvent["buf"] = buf;
                readEvent["size"] = this.size;
                readEvent["path"] = fileOpens[this.fd];
                readEvent["backtrace"] = getBacktrace(this.context);
                readEvent["return"] = this.returnAddress.sub(func_{{func.start}}_module);
                readEvent["pos"] = this.pos;
                readEvent["context"] = this.context;
                let hd = hexdump(readEvent['buf'], { length: Math.min(16,readEvent['size']), ansi: false, header:false});
                hd = hd.substring(hd.indexOf(' ')+1);
                readEvent.hexdump = hd;
                readEvent.retval = retval;
                this.readEvent = readEvent;
                send(readEvent);
            }
        }
    }
}

if(Module.findExportByName(null,'mmap')) {
    console.log("[*] hooking input symbol:mmap");
    Interceptor.attach(Module.getExportByName(null, 'mmap'), handleMmap);
}
