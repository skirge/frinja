{%- from "_macros.js.j2" import argparse, function_header -%}
{{ function_header(bv, func) }}

let index = 0;
let memAllocs = {};
let fileReads = {};

function getBacktrace(context) {
  return Thread.backtrace(context, Backtracer.ACCURATE).map((x) => x.sub(func_{{ func.start }}_module).toString(10))
}

const mallloc_funcs = ['malloc', 'calloc', 'realloc'];

function resolve_symbol(symname) {
    const sym_ptr = Module.findExportByName(null, symname);
    if(sym_ptr)
        return sym_ptr;
    console.log(`[*] not ${symname} in import table`);
    const debug_ptr = DebugSymbol.fromName(symname);
    if(debug_ptr && debug_ptr.address)
        return ptr(debug_ptr.address);
    console.log(`[*] not ${symname} in debug symbols`);
    return null;
}

function attach_malloc(symname) {
    const sym_ptr = resolve_symbol(symname);
    Interceptor.attach(sym_ptr, {

        onEnter(args) {
            //console.log(`[*] malloc onEnter`);
            this.size = args[0];
        },

        onLeave(retval) {
            const allocEvent = {};
            allocEvent["buf"] = retval.toString();
            allocEvent["size"] = this.size;
            allocEvent["backtrace"] = getBacktrace(this.context);
            memAllocs[retval.toString()] =  allocEvent;
        }
    });
}

mallloc_funcs.forEach(attach_malloc);

const va_ptr = resolve_symbol('VirtualAlloc');
console.log(`[*] VirtualAlloc:${va_ptr}`);
if(va_ptr) {
    console.log(`[*] Attaching to VirtualAlloc`);
    Interceptor.attach(va_ptr, {

        onEnter(args) {
            //console.log(`[*] VirtualAlloc onEnter`);
            this.size = args[1];
        },

        onLeave(retval) {
            const allocEvent = {};
            allocEvent["buf"] = retval.toString();
            allocEvent["size"] = this.size;
            allocEvent["backtrace"] = getBacktrace(this.context);
            memAllocs[retval.toString()] =  allocEvent;
        }
    });

}

const ha_ptr = resolve_symbol('HeapAlloc');
console.log(`[*] HeapAlloc:${ha_ptr}`);
if(ha_ptr) {
    console.log(`[*] Attaching to HeapAlloc`);
    Interceptor.attach(ha_ptr, {

        onEnter(args) {
            //console.log(`[*] HeapAlloc onEnter`);
            this.size = args[2];
        },

        onLeave(retval) {
            const allocEvent = {};
            allocEvent["buf"] = retval.toString();
            allocEvent["size"] = this.size;
            allocEvent["backtrace"] = getBacktrace(this.context);
            memAllocs[retval.toString()] =  allocEvent;
        }
    });

}

const hr_ptr = resolve_symbol('HeapReAlloc');
console.log(`[*] HeapReAlloc:${hr_ptr}`);
if(hr_ptr) {
    console.log(`[*] Attaching to HeapReAlloc`);
    Interceptor.attach(hr_ptr, {

        onEnter(args) {
            //console.log(`[*] HeapReAlloc onEnter`);
            this.size = args[3];
        },

        onLeave(retval) {
            const allocEvent = {};
            allocEvent["buf"] = retval.toString();
            allocEvent["size"] = this.size;
            allocEvent["backtrace"] = getBacktrace(this.context);
            memAllocs[retval.toString()] =  allocEvent;
        }
    });

}

const ga_ptr = resolve_symbol('GlobalAlloc');
console.log(`[*] GlobalAlloc:${ga_ptr}`);
if(ga_ptr) {
    console.log(`[*] Attaching to GlobalAlloc`);
    Interceptor.attach(ga_ptr, {

        onEnter(args) {
            //console.log(`[*] GlobalAlloc onEnter`);
            this.size = args[1];
        },

        onLeave(retval) {
            const allocEvent = {};
            allocEvent["buf"] = retval.toString();
            allocEvent["size"] = this.size;
            allocEvent["backtrace"] = getBacktrace(this.context);
            memAllocs[retval.toString()] =  allocEvent;
        }
    });

}


const free_funcs = ['free','VirtualFree', 'GlobalFree'];
function attach_free(symname) {
    const sym_ptr = resolve_symbol(symname);
    console.log(`[*] ${symname}:${sym_ptr}`);
    if(sym_ptr) {
        console.log(`[*] Attaching to ${symname}`);
        Interceptor.attach(sym_ptr, {
            onEnter(args) {
                //console.log(`[*] free onEnter`);
                const memPtr = args[0].toString();
                delete memAllocs[memPtr];
                if(fileReads.hasOwnProperty(memPtr)) {
                    delete fileReads[memPtr];
                }
            }
        });
    }
}

free_funcs.forEach(attach_free);

const hf_ptr = resolve_symbol('HeapFree');
console.log(`[*] HeapFree:${hf_ptr}`);
if(hf_ptr) {
    console.log(`[*] Attaching to HeapFree`);
    Interceptor.attach(hf_ptr, {
        onEnter(args) {
            //console.log(`[*] HeapFree onEnter`);
            const memPtr = args[2].toString();
            delete memAllocs[memPtr];
            if(fileReads.hasOwnProperty(memPtr)) {
                delete fileReads[memPtr];
            }
        }
    });
}

let fileOpens = {};

const open_ptr = resolve_symbol('open');
console.log(`[*] open:${open_ptr}`);
if(open_ptr) {
    console.log(`[*] Attaching to open`);
    Interceptor.attach(open_ptr, {
        onEnter(args) {
            //console.log(`[*] open onEnter`);
            this.path = args[0].readUtf8String(); // pathname
        },

        onLeave(retval) {
            if(retval.toInt32()<0) {
                console.log("-- cannot open:[" + this.path + "]");
                return
            }
            fileOpens[retval.toString()] = this.path;
        }

    })
}

const openf_ptr = resolve_symbol('CreateFileA');
console.log(`[*] CreateFileA:${openf_ptr}`);
if(openf_ptr) {
    console.log(`[*] Attaching to CreateFileA`);
    Interceptor.attach(openf_ptr, {
        onEnter(args) {
            //console.log(`[*] CreateFileA onEnter`);
            this.path = args[0].readUtf8String(); // pathname
        },

        onLeave(retval) {
            if(retval.toInt32()<0) {
                console.log("-- cannot open:[" + this.path + "]");
                return
            }
            fileOpens[retval.toString()] = this.path;
        }
    })
}


const socket_funcs = ['socket'];

function attach_socket(symname) {
    const socket_ptr = resolve_symbol(symname);
    console.log(`[*] ${symname}:${openf_ptr}`);
    if(!socket_ptr) {
        console.log(`[*] not ${symname} in import table`);
        return;
    }
    console.log(`[*] Attaching to ${symname}`);
    Interceptor.attach(socket_ptr, {

        onLeave(retval) {
            //console.log(`[*] socket onLeave`);
            if(retval.toInt32()<0) {
                console.log("-- cannot open socket");
                return
            }
            fileOpens[retval.toString()] = "NETWORK";
        }
    })
}

socket_funcs.forEach(attach_socket);

const close_ptr = resolve_symbol('close');
console.log(`[*] close:${close_ptr}`);
if(close_ptr) {
    console.log(`[*] Attaching to close`);
    Interceptor.attach(close_ptr, {
        onEnter(args) {
            //console.log(`[*] close onEnter`);
            const fd = args[0].toString();
            delete fileOpens[fd];
        },
    })
}

const closeh_ptr = resolve_symbol('CloseHandle');
console.log(`[*] CloseHandle:${closeh_ptr}`);
if(closeh_ptr) {
    console.log(`[*] Attaching to CloseHandle`);
    Interceptor.attach(closeh_ptr, {
        onEnter(args) {
            //console.log(`[*] CloseHandle onEnter`);
            const fd = args[0].toString();
            delete fileOpens[fd];
        },
    })
}

const handleRead = {
  onEnter(args) {

    // Save arguments for processing in onLeave.
	  const readEvent = {};
        //console.log(`[*] read onEnter`);

        const fd = args[0].toString();
        const buf = args[1].toString();
        const size = args[2].toString();

        if(!fileOpens.hasOwnProperty(fd)) {
            //console.log('[!] Unknown fd ' + fd);
            fileOpens[fd] = 'Unknown';
        }
        //console.log('[*] reading from fd:[' + fd + '], path:[' + fileOpens[fd] + ']');
        readEvent["size"] = size;
    readEvent["path"] = fileOpens[fd];
    readEvent["backtrace"] = getBacktrace(this.context);

    fileReads[buf]  = readEvent;
  },

}

const inputFunctions = ['ReadFile', 'ReadFileEx', 'read', 'recv', 'recvfrom','WSARecv'];

for(const inputf of inputFunctions) {
    const inputf_ptr = resolve_symbol(inputf);
    if(inputf_ptr) {
        console.log("[*] hooking input symbol:" + inputf);
        Interceptor.attach(inputf_ptr, handleRead);
    }
}

const registers = {{ bv.arch.standalone_platform.default_calling_convention.int_arg_regs+bv.arch.standalone_platform.default_calling_convention.callee_saved_regs+bv.arch.standalone_platform.default_calling_convention.caller_saved_regs }}

function dereference_ctx(ctx, derefs, taintedBuffers, heapChunks) {
    for(const reg of registers) {
        try {
            const regv = ctx[reg];
            telescope(regv, derefs, taintedBuffers, heapChunks, 0);
        } catch ({ name, message, stack }) {
            /*
            console.log(name);
            console.log(stack);
            console.log(message);
            */
        }
    }
}

function telescope(ptrValue, derefs, taintedBuffers, heapChunks, depth) {
    if(depth > 5) {
        //console.log("too deep!");
        return;
    }
    if(ptrValue === undefined) {
        //console.log("undefined pointer");
        return;
    }
    if (ptr(ptrValue).isNull() || ptr(0).compare(ptrValue)==0) {
        //console.log("NULL pointer");
        return;
    }
    /*
    if( ptr(ptrValue).toInt32() % 8 != 0) {
        //console.log("Unaligned pointer");
        return;
    }
    */
    if (func_{{func.start}}_ptr.compare(ptr(ptrValue)) > 0) {
        //console.log("unreadable address - not above module base");
        return;
    }
    try {
        var hd = "<unreadable>";
        var aptr = "<unreadable>";
        var sym = "<no symbol>";
        var size = 0;

        try {
            if(memAllocs[ptrValue]) {
                size = memAllocs[ptrValue].size;
            } else
                size = 8;
            hd = hexdump(ptrValue, {length: Math.min(16,size), ansi: false, header: false});
            hd = hd.substring(hd.indexOf(' ')+1)
        } catch ({ name, message, stack }) {
            /*
            console.log("block3");
            console.log(name);
            console.log(stack);
            console.log(message);
            */
        }

        try {
            sym = DebugSymbol.fromAddress(ptrValue);
        } catch ({ name, message, stack }) {
            /*
            console.log("block3-2");
            console.log(name);
            console.log(stack);
            console.log(message);
            */
        }

        if(memAllocs[ptrValue])
            heapChunks[ptrValue] = memAllocs[ptrValue];

        if(fileReads[ptrValue])
            taintedBuffers[ptrValue] = fileReads[ptrValue];

        // dereference memory pointers
        // TODO: per platform pointer size
        var fields = [];
        for(let i = 0; i < size; i+=8) {
            let p = ptrValue.add(i);
            try {
                let v = p.readPointer();
                fields.push(v);
                if(derefs[v] !== undefined ) {
                    continue;
                }
                if(p.compare(v)!=0 && ptrValue.compare(v)!=0) {
                    if(!v.isNull()) {
                        // valid pointer will be aligned
                        if( v.toInt32() % 8 == 0) {
                            if (func_3224882528_ptr.compare(v) < 0) {
                                telescope(v, derefs, taintedBuffers, heapChunks, depth+1);
                            }
                        }
                    }
                }
            } catch ({ name, message, stack }) {
                /*
                console.log("block2");
                console.log(name);
                console.log(stack);
                console.log(message);
                */
            }
            const d = {};
            d.fields = fields;
            d.hexdump = hd;
            d.size = size;
            if(sym)
            d.symbol = sym.name;
            derefs[ptrValue] = d;
        }

    } catch ({ name, message, stack }) {
        /*
        console.log("block4");
        console.log(name);
        console.log(stack);
        console.log(message);
        */
    }
}

Interceptor.attach(func_{{ func.start }}_ptr, {
	onEnter(args) {
        console.log("[*] Entering hooked function");
		if (index > 50) {
			Interceptor.detachAll();
			throw new Error(`{{ func.name }}: Maximum call depth exceeded (${index - 1}), detaching all intercepts`);
		}

		this.index = index;
    const buffers = {}
    const heap = {}
    let derefs = {}
    try {
        dereference_ctx(this.context, derefs, buffers, heap);
    } catch ({ name, message, stack }) {
        /*
        console.log("block5");
        console.log(name);
        console.log(stack);
        console.log(message);
        */
    }

    const resolved_args = {};

    {% for param in func.parameter_vars -%}
        {%- set index = loop.index0 | string -%}
        try {
            resolved_args["{{param.name}}"] = {{- argparse(param, "args[" + index + "]") -}};
        } catch ({ name, message, stack }) {
            /*
            console.log("resolving arguments");
            console.log(name);
            console.log(stack);
            console.log(message);
            */
        }
    {% endfor %}

    //console.log(`[*] resolved_args = ${JSON.stringify(resolved_args)}`);

    const msg = {
        "context": this.context,
        "backtrace" : getBacktrace(this.context),
        "return": this.returnAddress.sub(func_{{ func.start }}_module),
            "depth": this.depth,
            "thread_id": this.threadId,
            "index": index++,
            "args": resolved_args,
            "fileReads": buffers,
            "fds" : fileOpens,
            "heap" : heap,
            "pointers" : derefs

    }

    //console.log(`[*] msg = ${JSON.stringify(msg)}`);

    send(msg);
	},
	onLeave(retval) {
        console.log("[*] Leaving hooked function");
    const buffers = {}
    const heap = {}
    let derefs = {}
    try {
        dereference_ctx(this.context, derefs, buffers, heap);
    } catch ({ name, message, stack }) {
        /*
        console.log("block7");
        console.log(name);
        console.log(stack);
        console.log(message);
        */
    }

		send({
			"context": this.context ? this.context : {},
      "backtrace" : {},
			"retval": retval ? retval : "",
			"index": this.index,
             "fileReads": buffers,
      "fds" : fileOpens,
       "heap" : heap,
      "pointers" : derefs
		})
	}
});