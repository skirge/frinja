'use strict';

// Got from https://github.com/murx-/devi/blob/master/devi_frida_tracer.js
// Version 0.2

{%- from "_macros.js.j2" import function_header -%}
{{ function_header(bv, func) }}
const myModule = Process.getModuleByName("{{ bv.file.original_filename.split("/") | last }}");
const symbolAddress = func_{{ func.start }}_ptr;
const debug = "False";

if (symbolAddress === undefined) {
	console.log("[!] Unable to find symbol " + symbolInput)
	send({ "deviError": "No symbol found named: " + symbolInput })
}


if (myModule !== null) {
	myModule.end = myModule.base.add(myModule.size);
	attachInterceptor();
} else {
	send({ "deviError": "No module found named: {{ bv.file.original_filename.split("/") | last }}" });
	// exit javascript here?
	console.log("[!] No module found named: {{ bv.file.original_filename.split("/") | last }}")
	Interceptor.detachAll();
	throw new Error(`{{ func.name }}: No module found named: {{ bv.file.original_filename.split("/") | last }}, detaching all intercepts`);
}

/**
 *
 * @param {*} str
 *
 * Debug print
 *
 */
function log_d(str) {
	if (debug === "True")
		console.log("[+] " + str);
}

/**
 *
 * @param {*} moduleName
 * @param {*} symbolName
 *
 * return the symbol in the module
 *
 */
function getSymbolAddress(moduleName, symbolName) {
	var symbols = Module.enumerateSymbols(moduleName);
	for (var i = 0; i < symbols.length; i++) {
		if (symbols[i].name == symbolName)
			return symbols[i].address
	}
}

/**
 *
 * @param {*} codePointer
 * check if the instruction at codePointer is an indrect call.
 */
function isIndirectCall(codePointer) {
	return !Instruction.parse(codePointer).toString().startsWith('call 0x')
}

function printDebugCallEvent(callEvent) {
	log_d((callEvent[1] - myModule.base).toString(16) + ' -> ' + (callEvent[2] - myModule.base).toString(16));
	log_d(Instruction.parse(callEvent[1]) + " -> " + Instruction.parse(callEvent[2]));
	log_d("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
}

/**
 * stalk the current thread.
 */
function traceCalls() {
	Stalker.follow({
		events: {
			call: true
		},

		onReceive: function (events) {
			var callList = [];

			var call_events = Stalker.parse(events);
			call_events.forEach(function (event) {
				//todo change ifs
				if ((myModule.base <= event[1]) && (event[1] <= myModule.end)) {
					if (isIndirectCall(ptr(event[1]))) {

						//debug!
						printDebugCallEvent(event);

						var src = (event[1]);
						var payload = {};
						payload[src] = (event[2]).toString(10);
						callList.push(payload);
					}
				}
			});

			send({ "callList": callList })
		},

		onLeave: function (retval) {
			//console.log("onLeave Called");
			Stalker.unfollow(Process.getCurrentThreadId());
			Stalker.flush();
			Stalker.garbageCollect();
			send({ "finished": true });
		}

	});
}


/**
 * attach interceptor to main, and start stalker
 */
let depth = 0;
let start = Date.now();

 // Send ModuleMap to devi
 send({ "moduleMap": Process.enumerateModulesSync() })
function attachInterceptor() {
	Interceptor.attach(symbolAddress, {
		onEnter: function (args) {
            if(depth > 50 || ((Date.now() - start) > 5*60*1000)) {
                send({"deviDetach":"Limit reached, detach all"});
				Interceptor.detachAll();
				throw new Error(`{{ func.name }}: Maximum call depth (${depth - 1}) or time exceeded, detaching all intercepts`);
			}
			console.log(`[-] {{ func.name }}: Start Tracing: (${depth})`);
			traceCalls();
            depth++;
		},
		onLeave: function () {
			Stalker.flush();
			Stalker.unfollow(Process.getCurrentThreadId());
			Stalker.garbageCollect();
			console.log('[-] Done Tracing')
			// send here that we are done and user should detach
			send({"deviFinished":"Execution finished detach with ctrl + d"})
		}
	});
}