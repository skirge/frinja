{%- from "_macros.js.j2" import function_header -%}
{{ function_header(bv, func) }}
const basic_blocks = [
	{% for bb in func.basic_blocks -%}
		{%- if loop.index != 1 -%}
		func_{{ func.start }}_module.add({{ "%#x" % (bb.start - bv.start) }}),
		{%- endif %}
	{% endfor %}
];

let hooked_blocks = {}

Interceptor.attach(func_{{ func.start }}_ptr, {
	onEnter: function(args) {
		for (const block of basic_blocks) {
			const instr = Instruction.parse(block)
			const page = Memory.alloc(Process.pageSize);
			const return_ptr = block.add(1)

			hooked_blocks[block] = page;

			// Move the code to the new memory page
			Memory.patchCode(page, 64, code => {
				const writer = new X86Writer(code, { pc: code });
				const relocator = new X86Relocator(block, writer);

				relocator.readOne();
				relocator.writeOne();

				writer.putJmpAddress(return_ptr);
				writer.flush();
			});

			// Add a breakpoint to the original code
			Memory.patchCode(block, 64, function(code) {
				const writer = new X86Writer(code, {pc: code})
				writer.putBreakpoint();
				writer.putNopPadding(instr.size - 1);
			});
		}
	}
});

Process.setExceptionHandler(args => {
	if(args.type === "breakpoint"){
		// Send the basic block offset to the python script as we don't know the module base address
		send(args.address.sub(func_{{ func.start }}_module).sub(1));

		args.context["pc"] = hooked_blocks[args.address.sub(1)];
		return true;
	}

	console.log(args.type)
	return false
});